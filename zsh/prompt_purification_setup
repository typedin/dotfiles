#!/usr/bin/env bash 

# Based on:
# Purification
# by Matthieu Cneude
# https://github.com/Phantas0s/purification

# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

# Define Git status symbols in a lookup table
declare -A GIT_STATUS_SYMBOLS=(
  [added]=""
  [ahead]=""
  [behind]=""
  [deleted]=""
  [modified]=""
  [renamed]=""
  [stash]=""
  [unmerged]=""
  [untracked]=""
)
# Assign colors directly without using a lookup table
ZSH_THEME_GIT_PROMPT_PREFIX=" "
ZSH_THEME_GIT_PROMPT_DIRTY=""
ZSH_THEME_GIT_PROMPT_CLEAN=""

ZSH_THEME_GIT_PROMPT_ADDED="${GIT_STATUS_SYMBOLS[added]}"
ZSH_THEME_GIT_PROMPT_AHEAD="F${GIT_STATUS_SYMBOLS[ahead]}"
ZSH_THEME_GIT_PROMPT_BEHIND="${GIT_STATUS_SYMBOLS[behind]}"
ZSH_THEME_GIT_PROMPT_DELETED="${GIT_STATUS_SYMBOLS[deleted]}"
ZSH_THEME_GIT_PROMPT_MODIFIED="${GIT_STATUS_SYMBOLS[modified]}"
ZSH_THEME_GIT_PROMPT_RENAMED="${GIT_STATUS_SYMBOLS[renamed]}"
ZSH_THEME_GIT_PROMPT_STASHED="${GIT_STATUS_SYMBOLS[stash]}"
ZSH_THEME_GIT_PROMPT_UNMERGED="${GIT_STATUS_SYMBOLS[unmerged]}"
ZSH_THEME_GIT_PROMPT_UNTRACKED="${GIT_STATUS_SYMBOLS[untracked]}"

git_prompt_status() { 
  # Declare an array to hold status symbols
  local STATUS=""
  local STATUS_ARRAY=()

  # Get the git status summary
  local git_status=$(git status --porcelain -b 2>/dev/null)

  # Function to check and append symbols to the array
  check_untracked() {
    if [[ "$1" == "?? "* ]]; then
      STATUS_ARRAY+=("$ZSH_THEME_GIT_PROMPT_UNTRACKED")
    fi
  }

  check_added_modified() {
    if [[ "$1" =~ ^(A  |M  |MM ) ]]; then
      STATUS_ARRAY+=("$ZSH_THEME_GIT_PROMPT_ADDED")
    fi
  }

  check_modified() {
    if [[ "$1" =~ ^( M |AM | T ) ]]; then
      STATUS_ARRAY+=("$ZSH_THEME_GIT_PROMPT_MODIFIED")
    fi
  }

  check_renamed() {
    if [[ "$1" == "R  "* ]]; then
      STATUS_ARRAY+=("$ZSH_THEME_GIT_PROMPT_RENAMED")
    fi
  }

  check_deleted() {
    if [[ "$1" =~ ^( D |D  |AD ) ]]; then
      STATUS_ARRAY+=("$ZSH_THEME_GIT_PROMPT_DELETED")
    fi
  }

  # Check for stashed changes
  check_stash() {
    if git rev-parse --verify refs/stash >/dev/null 2>&1; then
      STATUS_ARRAY+=("$ZSH_THEME_GIT_PROMPT_STASHED")
    fi
  }

  # Process each line of the status
  while IFS= read -r line; do
    check_untracked "$line"
    check_added_modified "$line"
    check_modified "$line"
    check_renamed "$line"
    check_deleted "$line"
  done <<< "$git_status"

  check_stash

  # Concatenate array into STATUS string with a space between symbols
  if [[ ${#STATUS_ARRAY[@]} -gt 0 ]]; then
    # don't remove one of the 2 white spaces
    STATUS="[ ${STATUS_ARRAY[*]}  ]"
  fi

  # Return the final status string
  echo "$STATUS"
}

prompt_git_branch() {
  autoload -Uz vcs_info 
  precmd_vcs_info() { vcs_info }
  precmd_functions+=( precmd_vcs_info )
  setopt prompt_subst
  zstyle ':vcs_info:git:*' formats '%b'
}

prompt_git_info() {
  echo "%B%F{white}%$ZSH_THEME_GIT_PROMPT_PREFIX$vcs_info_msg_0_$ZSH_THEME_GIT_PROMPT_SUFFIX"
}

prompt_purity_precmd() {
  # Pass a line before each prompt
  print -P ''
}

prompt_purification_setup() {
  # Load Git branch info
  prompt_git_branch

  # Set up the left side of the prompt
  CURRENT_PATH='%F{white}%~%f'
  PROMPT_SYMBOL='%B%F{blue} %f%b '
  PROMPT="$CURRENT_PATH $PROMPT_SYMBOL "

  # Set up the right side of the prompt with git info and status
  RPROMPT='$(prompt_git_info) $(git_prompt_status)'

  # Set the precmd function to include an empty line before the prompt
  autoload -Uz add-zsh-hook
  add-zsh-hook precmd prompt_purity_precmd
}

prompt_purification_setup
