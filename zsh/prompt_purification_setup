#!/usr/bin/env bash 
# Purification
# by Matthieu Cneude
# https://github.com/Phantas0s/purification

# Based on:

# Purity
# by Kevin Lanni
# https://github.com/therealklanni/purity
# MIT License

# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)

# Display git status
# TODO to refactor with switch / using someting else than grep
# Might be faster using ripgrep too
git_prompt_status() { 
  local INDEX STATUS

  # Get the git status summary
  INDEX=$(git status --porcelain -b 2>/dev/null)

  STATUS=""

  # Function to append status symbols
  append_status() {
    local SYMBOL=$1
    STATUS="${SYMBOL}${STATUS}"
  }

  # Iterate through each line in the Git status output
  while IFS= read -r line; do
    case "$line" in
      # Untracked Files
      # Matches lines starting with '?? ' indicating untracked files (not added to Git).
      "?? "*)
        append_status "$ZSH_THEME_GIT_PROMPT_UNTRACKED"
        ;;

      # Added Files
      # Matches:
      # - "A  " : File staged for addition.
      # - "M  " : File modified and staged.
      # - "MM " : File modified in both index and working directory.
      "A  "* | "M  "* | "MM "*)
        append_status "$ZSH_THEME_GIT_PROMPT_ADDED"
        ;;

      # Modified Files
      # Matches:
      # - " M " : File modified but not staged.
      # - "AM " : File added and then modified.
      # - " T " : File type (e.g., permissions) has changed.
      " M "* | "AM "* | " T "*)
        append_status "$ZSH_THEME_GIT_PROMPT_MODIFIED"
        ;;

      # Renamed Files
      # Matches lines starting with 'R  ' indicating renamed files.
      "R  "*)
        append_status "$ZSH_THEME_GIT_PROMPT_RENAMED"
        ;;

      # Deleted Files
      # Matches:
      # - " D " : File deleted but not staged.
      # - "D  " : File staged for deletion.
      # - "AD " : File added and then deleted.
      " D "* | "D  "* | "AD "*)
        append_status "$ZSH_THEME_GIT_PROMPT_DELETED"
        ;;

      # Unmerged Files
      # Matches lines starting with 'UU ' indicating unresolved merge conflicts.
      "UU "*)
        append_status "$ZSH_THEME_GIT_PROMPT_UNMERGED"
        ;;

      # Ahead of Remote
      # Matches lines starting with '##' containing 'ahead' indicating commits are ahead of remote.
      "## "*ahead*)
        append_status "$ZSH_THEME_GIT_PROMPT_AHEAD"
        ;;

      # Behind Remote
      # Matches lines starting with '##' containing 'behind' indicating the branch is behind the remote.
      "## "*behind*)
        append_status "$ZSH_THEME_GIT_PROMPT_BEHIND"
        ;;

      # Diverged from Remote
      # Matches lines starting with '##' containing 'diverged' indicating the branch is both ahead and behind.
      "## "*diverged*)
        append_status "$ZSH_THEME_GIT_PROMPT_DIVERGED"
        ;;
    esac
  done <<< "$INDEX"

  # Check for stashed changes using ripgrep
  if git rev-parse --verify refs/stash >/dev/null 2>&1; then
    append_status "$ZSH_THEME_GIT_PROMPT_STASHED"
  fi

  # Output the status if not empty
  if [[ -n "$STATUS" ]]; then
    echo "[ $STATUS ]"
  fi

}


prompt_git_branch() {
  autoload -Uz vcs_info 
  precmd_vcs_info() { vcs_info }
  precmd_functions+=( precmd_vcs_info )
  setopt prompt_subst
  zstyle ':vcs_info:git:*' formats '%b'
}

prompt_git_info() {
  # [ ! -z "$vcs_info_msg_0_" ] && echo "$ZSH_THEME_GIT_PROMPT_PREFIX$vcs_info_msg_0_%f$ZSH_THEME_GIT_PROMPT_SUFFIX"
  [ -z "$vcs_info_msg_0_" ] && echo "%F{white}$ZSH_THEME_GIT_PROMPT_PREFIX%f$ZSH_THEME_GIT_PROMPT_SUFFIX" || echo "%F{red}$ZSH_THEME_GIT_PROMPT_PREFIX$vcs_info_msg_0_%f$ZSH_THEME_GIT_PROMPT_SUFFIX"
}

prompt_purity_precmd() {
  # Pass a line before each prompt
  print -P ''
}

prompt_purification_setup() {
  # Display git branch

  autoload -Uz add-zsh-hook
  add-zsh-hook precmd prompt_purity_precmd

  ZSH_THEME_GIT_PROMPT_PREFIX="   "
  ZSH_THEME_GIT_PROMPT_DIRTY=" %F{red} %f "
  ZSH_THEME_GIT_PROMPT_CLEAN=" %F{green} %f "

  ZSH_THEME_GIT_PROMPT_ADDED="%F{green} %f "
  ZSH_THEME_GIT_PROMPT_MODIFIED="%F{blue} %f "
  ZSH_THEME_GIT_PROMPT_DELETED="%F{red} %f "
  ZSH_THEME_GIT_PROMPT_RENAMED="%F{magenta} %f "
  ZSH_THEME_GIT_PROMPT_UNMERGED="%F{yellow} %f "
  ZSH_THEME_GIT_PROMPT_UNTRACKED="%F{white} %f "
  ZSH_THEME_GIT_PROMPT_STASHED="%B%F{red} %f%b "
  ZSH_THEME_GIT_PROMPT_BEHIND="%B%F{red} %f%b "
  ZSH_THEME_GIT_PROMPT_AHEAD="%B%F{green} %f%b "

  prompt_git_branch

  # sets the left part of the prompt line
  # sets the current path to white
  CURRENT_PATH='%F{white}%~%f'
  # sets the prompt symbol to a right arrow and it is set to a dark blue color
  PROMPT_SYMBOL='%B%F{blue} %f%b'
  PROMPT=$'$CURRENT_PATH $PROMPT_SYMBOL '

  # sets the right part of the prompt line
  RPROMPT='$(prompt_git_info) $(git_prompt_status)'
}

prompt_purification_setup
